/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2024. Aleksey Lubenets <alubenets.dev>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package dev.alubenets.asyncapi.models;

import java.util.List;

/**
 * Defines a security scheme that can be used by the operations. Supported schemes are:
 * <ul>
 *     <li>User/Password.</li>
 *     <li>API key (either as user or as password).</li>
 *     <li>X.509 certificate.</li>
 *     <li>End-to-end encryption (either symmetric or asymmetric).</li>
 *     <li>HTTP authentication.</li>
 *     <li>HTTP API key.</li>
 *     <li>OAuth2's common flows (Implicit, Resource Owner Protected Credentials, Client Credentials and Authorization Code) as defined in RFC6749.</li>
 *     <li>OpenID Connect Discovery.</li>
 *     <li>SASL (Simple Authentication and Security Layer) as defined in RFC4422.</li>
 * </ul>
 * @param _type REQUIRED. The type of the security scheme. Valid values are "userPassword", "apiKey", "X509", "symmetricEncryption", "asymmetricEncryption", "httpApiKey", "http", "oauth2", "openIdConnect", "plain", "scramSha256", "scramSha512", and "gssapi".
 * @param description A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
 * @param name REQUIRED. The name of the header, query or cookie parameter to be used.
 * @param in REQUIRED. The location of the API key. Valid values are "user" and "password" for apiKey and "query", "header" or "cookie" for httpApiKey.
 * @param scheme REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
 * @param bearerFormat A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
 * @param flows REQUIRED. An object containing configuration information for the flow types supported.
 * @param openIdConnectUrl REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of an absolute URL.
 * @param scopes List of the needed scope names. An empty array means no scopes are needed.
 * @see <a href="https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#security-scheme-object">Security Scheme Object</a>
 */
public record SecurityScheme(
    String $ref,
    String _type,
    String description,
    String name,
    String in,
    String scheme,
    String bearerFormat,
    Object flows,
    String openIdConnectUrl,
    List<String> scopes
) implements Reference {
}
